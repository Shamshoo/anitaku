{
  "id": "anitaku-provider",
  "name": "AniTaku",
  "description": "Online anime streaming provider",
  "version": "1.0.0",
  "type": "onlinestream-provider",
  "manifestURI": "https://raw.githubusercontent.com/Shamshoo/anitaku/refs/heads/main/manifest.json",
  "language": "javascript",
  "author": "Shamshoo",
  "meta": {
    "website": "https://anitaku.to"
  },
  "payload": "/// <reference path=\"./online-streaming-provider.d.ts\" />\n/// <reference path=\"./doc.d.ts\" />\n/// <reference path=\"./crypto.d.ts\" />\n\nclass Provider{constructor(){this.api=\"https://anitaku.to\";this.ajaxUrl=\"https://ajax.gogo-load.com/ajax\"}getSettings(){return{episodeServers:[\"default\",\"vidstreaming\",\"streamsb\",\"doodstream\"],supportsDub:true}}async search(query){console.log(\"Search query:\",query);try{const response=await fetch(`${this.api}/search.html?keyword=${encodeURIComponent(query)}`);console.log(\"Response status:\",response.status);const html=await response.text();console.log(\"HTML length:\",html.length);const results=[];const doc=new Doc(html);const items=doc('div.last_episodes ul.items li');console.log(\"Found potential results:\",items.length());items.each((i,el)=>{const element=doc(el);const link=element.find('p.name a');const title=link.text().trim();const url=link.attr('href');const img=element.find('div.img img').attr('src');const isDub=title.toLowerCase().includes('(dub)');if(url){results.push({id:url.replace(/^\\/+/,''),title:title,url:this.api+url,image:img,subOrDub:isDub?\"dub\":\"sub\"})}});console.log(\"Final results:\",results.length);return results}catch(error){console.error(\"Search error:\",error);return[]}}async findEpisodes(id){console.log(\"Finding episodes for:\",id);try{if(id.startsWith('/')){id=id.substring(1)}if(!id.startsWith('category/')){id='category/'+id}const url=`${this.api}/${id}`;console.log(\"Fetching URL:\",url);const response=await fetch(url);console.log(\"Response status:\",response.status);if(!response.ok){throw new Error(`Failed to fetch episodes: ${response.status}`)}const html=await response.text();console.log(\"HTML length:\",html.length);const doc=new Doc(html);const animeId=doc('input#movie_id').attr('value');if(!animeId){console.error(\"Could not find anime ID\");return[]}const ajaxUrl=`${this.ajaxUrl}/load-list-episode?ep_start=0&ep_end=9999&id=${animeId}`;console.log(\"Fetching episodes ajax URL:\",ajaxUrl);const ajaxResponse=await fetch(ajaxUrl);const ajaxHtml=await ajaxResponse.text();const episodeDoc=new Doc(ajaxHtml);const episodeItems=episodeDoc('ul#episode_related li a');const episodes=[];episodeItems.each((i,el)=>{const element=episodeDoc(el);const episodeUrl=element.attr('href')?.trim();const episodeNameFull=element.find('div.name').text().trim();const epMatch=episodeNameFull.match(/EP\\s+(\\d+(\\.\\d+)?)/i);let episodeNumber=i+1;if(epMatch&&epMatch[1]){episodeNumber=parseFloat(epMatch[1])}if(episodeUrl){episodes.push({id:episodeUrl.replace(/^\\/+/,''),url:this.api+episodeUrl,number:episodeNumber,title:`Episode ${episodeNumber}`})}});episodes.sort((a,b)=>a.number-b.number);console.log(\"Final episode count:\",episodes.length);return episodes}catch(error){console.error(\"Find episodes error:\",error);return[]}}async findEpisodeServer(episodeId,server=\"default\"){console.log(\"Finding servers for episode:\",episodeId,\"server:\",server);try{if(episodeId.startsWith('/')){episodeId=episodeId.substring(1)}const url=`${this.api}/${episodeId}`;console.log(\"Fetching URL:\",url);const response=await fetch(url);console.log(\"Response status:\",response.status);if(!response.ok){throw new Error(`Failed to fetch episode: ${response.status}`)}const html=await response.text();console.log(\"HTML length:\",html.length);const doc=new Doc(html);const downloadLink=doc('div.dowloads a').attr('href');const videoIdMatch=html.match(/\\&id=([^&\"]*)/);if(!videoIdMatch||!videoIdMatch[1]){throw new Error(\"Could not find video ID\")}const videoId=videoIdMatch[1];console.log(\"Video ID:\",videoId);const serverElements=doc('div.anime_muti_link ul li');let targetServer=null;const serverMap={\"default\":\"vidcdn\",\"vidstreaming\":\"vidcdn\",\"streamsb\":\"streamsb\",\"doodstream\":\"doodstream\"};const requestedServerName=serverMap[server]||\"vidcdn\";serverElements.each((i,el)=>{const element=doc(el);const serverClass=element.attr('class');if(serverClass&&serverClass.includes(requestedServerName)){targetServer=element.data('video');return false}});if(!targetServer){targetServer=doc('div.anime_muti_link ul li').first().data('video')}if(!targetServer){throw new Error(\"No streaming servers found\")}console.log(\"Found server:\",targetServer);let videoUrl=targetServer;if(videoUrl.startsWith('//')){videoUrl='https:'+videoUrl}const isM3U8=videoUrl.includes('.m3u8');const isMp4=videoUrl.includes('.mp4');const type=isM3U8?'m3u8':(isMp4?'mp4':'iframe');return{server:server,headers:{\"Referer\":this.api,\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"},videoSources:[{url:videoUrl,type:type,quality:\"auto\",subtitles:[]}]}}catch(error){console.error(\"Find episode server error:\",error);return{server:server,headers:{},videoSources:[]}}}}"
}
